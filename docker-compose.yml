version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: safargo-postgres
    environment:
      POSTGRES_DB: safargo
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: safargo-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: safargo-api
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/safargo
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-64-chars-minimum
      JWT_EXPIRES_IN: 7d
      STORAGE_ENDPOINT: http://minio:9000
      STORAGE_BUCKET: safargo-assets
      STORAGE_KEY: minioadmin
      STORAGE_SECRET: minioadmin
      STORAGE_REGION: us-east-1
      PAYMENT_KEY: sk_test_...
      PAYMENT_WEBHOOK_SECRET: whsec_...
      MAPBOX_TOKEN: pk.eyJ1IjoieW91ci10b2tlbiIsImEiOiJjbGV4YW1wbGUifQ
      EMAIL_API_KEY: SG.your-sendgrid-api-key
      SMS_API_KEY: your-twilio-account-sid
      SMS_SECRET: your-twilio-auth-token
      SMS_FROM: +1234567890
      FCM_SERVER_KEY: your-fcm-server-key
      SENTRY_DSN: https://your-sentry-dsn@sentry.io/project-id
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/api:/app
      - /app/node_modules
    command: pnpm dev

  # Web App
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: safargo-web
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_APP_URL: http://localhost:3000
      NEXT_PUBLIC_ADMIN_URL: http://localhost:3000/admin
      MAPBOX_TOKEN: pk.eyJ1IjoieW91ci10b2tlbiIsImEiOiJjbGV4YW1wbGUifQ
    ports:
      - "3000:3000"
    depends_on:
      - api
    volumes:
      - ./apps/web:/app
      - /app/node_modules
    command: pnpm dev

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: safargo-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: safargo-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infra/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - web
      - api
    profiles:
      - production

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: safargo-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: safargo-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infra/grafana/datasources:/etc/grafana/provisioning/datasources
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data: