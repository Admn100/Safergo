version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: safargo-postgres-prod
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgres/backup:/backup
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - safargo-network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: safargo-redis-prod
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - safargo-network

  # API
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: safargo-api-prod
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      STORAGE_ENDPOINT: ${STORAGE_ENDPOINT}
      STORAGE_BUCKET: ${STORAGE_BUCKET}
      STORAGE_KEY: ${STORAGE_KEY}
      STORAGE_SECRET: ${STORAGE_SECRET}
      STORAGE_REGION: ${STORAGE_REGION}
      PAYMENT_KEY: ${PAYMENT_KEY}
      PAYMENT_WEBHOOK_SECRET: ${PAYMENT_WEBHOOK_SECRET}
      MAPBOX_TOKEN: ${MAPBOX_TOKEN}
      EMAIL_API_KEY: ${EMAIL_API_KEY}
      SMS_API_KEY: ${SMS_API_KEY}
      SMS_SECRET: ${SMS_SECRET}
      SMS_FROM: ${SMS_FROM}
      FCM_SERVER_KEY: ${FCM_SERVER_KEY}
      SENTRY_DSN: ${SENTRY_DSN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - safargo-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Web App
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: safargo-web-prod
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}
      NEXT_PUBLIC_ADMIN_URL: ${NEXT_PUBLIC_ADMIN_URL}
      MAPBOX_TOKEN: ${MAPBOX_TOKEN}
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - safargo-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: safargo-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./infra/nginx/ssl:/etc/nginx/ssl
      - ./infra/nginx/logs:/var/log/nginx
    depends_on:
      - web
      - api
    restart: unless-stopped
    networks:
      - safargo-network

  # MinIO
  minio:
    image: minio/minio:latest
    container_name: safargo-minio-prod
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped
    networks:
      - safargo-network

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: safargo-prometheus-prod
    volumes:
      - ./infra/prometheus/prometheus.prod.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - safargo-network

  grafana:
    image: grafana/grafana:latest
    container_name: safargo-grafana-prod
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SERVER_ROOT_URL: ${GRAFANA_URL}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infra/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - safargo-network

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: safargo-loki-prod
    volumes:
      - ./infra/loki/loki.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - safargo-network

  # Log collection
  promtail:
    image: grafana/promtail:latest
    container_name: safargo-promtail-prod
    volumes:
      - ./infra/promtail/promtail.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    restart: unless-stopped
    networks:
      - safargo-network

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  safargo-network:
    driver: bridge